// 非数学环境
//     |-------- add (brace environment)
//     |-------- math (no new form here)
// 数学环境
//     |-------- Fraction
//     |-------- Operators, arrow, Greek, function
//     |-------- sum & diff & integral
//     |-------- Super/sub script, space
//     |-------- math env (add/new), font (font)
//     |-------- braket (lr/big/phy), hat bottom


global
function cycle(arr,str){
    let count = 0 ;
    while (str!=arr[++count]&&count<arr.length);
    return arr[(count+1)%arr.length]
}


// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "\n";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order ).toString() + " & ";
			order ++;
		}
		results += " $"+(order).toString() +" \\\\"+ "\\"+ "\n";
		order ++;
	}
	return results;
}

function tes_matrix(nrow, ncol,t) {
	let results = "\n";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			if (order > 1 ){
				results += "${" +(order ).toString() + ":" + t[order-2] + "}\t & ";
			}
			else{
				results += "$" +(order ).toString()  + " & ";
			}
			order ++;
		}
		results += " $"+(order).toString() +" \\\\"+ "\\"+ "\n";
		order ++;
	}
	return results;
}
endglobal

//=============================
//      非数学环境
//=============================

snippet schrodinger "Schrodinger" w
Schrödinger
endsnippet

// ============ add - brace environment ==============
snippet addclred "添加红色, 其它颜色如 addclblue\s" w
<font color=red>$0</font>
endsnippet

snippet addBold "加粗" w
**$0**
endsnippet

snippet addItalic "斜体" w
*$0*
endsnippet

snippet addUnderline "下划线" w
<u>$0</u>
endsnippet

snippet addDeleteline "删除线" w
~~$0~~
endsnippet

snippet addMark "高亮" w
==$0==
endsnippet

snippet addSuperscript "上标" w
^$0^
endsnippet

snippet addSubscript "下标" w
~$0~
endsnippet

snippet addSmall "小号字体" w
<small>$0</small>
endsnippet

snippet addLarge "大号字体" w
<big>$0</big>
endsnippet

// ============ math environment ==============

snippet mmm "inline Math" wA
${ $0 }$ 
endsnippet

snippet mmm "inline Math" wAi
 ${ $0 }$ 
endsnippet

snippet `mmm\s` "inline Math" wA
${ $0 }$
endsnippet

snippet MMM "display Math" wA
$$
	${0}
$$
endsnippet

snippet `MMM\s` "display Math" wA
$$
	${0}
$$
endsnippet

snippet align "添加多个利用 $ 对齐的公式, *表示不编号" w
$$
\begin{align${1:*}}
	$0
\end{align${1:*}}
$$
endsnippet

snippet gather "添加多个居中对齐的公式, *表示不编号" w
$$
	$0
$$
endsnippet

snippet newEq "添加单个公式, *表示不编号" wA
$$
\begin{equation${1:*}}
	$0
\end{equation${1:*}}
$$
endsnippet




//=============================
//      数学环境
//=============================

// ============ Fraction ==============

snippet // "fraction" AmM
\frac{$1}{$2}$0
endsnippet

snippet `^.*\)//` "Fraction with ()" Am
``
    let str = m[0];
    str = str.slice(0, -2);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;
    let flag = 0;

    while (true) {
        if (str[i] == ')') depth += 1;
        if (str[i] == '(') depth -= 1;
        if (i  == 0)  depth = 0, flag = 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str
    if (flag==0) results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}{$1}$0";
    if (flag==1) results += "/";
    rv = results;
        ``
endsnippet

snippet `((\d+)|(\d*)(\\)?([A-Za-z^_\)\(\d]+)((\^|_)(\{\d+|\d))*)(?<!right\)|bigr\)|Bigr\)|Biggr\)|biggr\))//` "fraction" Am
\frac{``rv=m[1]``}{$1} $0
endsnippet

snippet `addcl([a-z]*) ` "color" iA
<font color=``rv = m[1]``>$0</font>
endsnippet

// ============ Operators, arrows ==============

snippet +- "±" wmA
\pm 
endsnippet

snippet -+ "∓" wmA
\mp 
endsnippet

snippet cdot "·" wmAi
\cdot 
endsnippet

snippet Dot "•" wmA
\bigcdot 
endsnippet

snippet oxx "⊗" Amw
\otimes 
endsnippet

snippet xx "×" mw
\times 
endsnippet

snippet inn "∈" mwA
\in 
endsnippet

snippet setin "包含" mw
\subseteq
endsnippet

snippet setiin "差" mw
\subseteq
endsnippet

snippet setmin "差" mw
\setminus
endsnippet

snippet setsmi "对称差" mw
\bigtriangleup
endsnippet

snippet setu "并" mw
\cup
endsnippet

snippet setn "交" mw
\cap
endsnippet

snippet setemp "空" mw
\emptyset
endsnippet

snippet `(?<![\\a-zA-Z])notin` "∉" Am
\notin 
endsnippet

snippet `(?<![\\a-zA-Z])forall` "∀" Am
\forall 
endsnippet

snippet `e\\xi st` "∃" Am
\exists 
endsnippet

snippet \\ "∖" mwA
\\\\

endsnippet

snippet >> "≫" mwA
\gg 
endsnippet

snippet << "≪" mwA
\ll 
endsnippet

snippet >= "≥" imA
\geq 
endsnippet

snippet <= "≤" imA
\leq
endsnippet

snippet != "≠" imA
\neq 
endsnippet

snippet `(?<![\\a-zA-Z])neq` "≠" Am
\neq 
endsnippet

snippet `&==` "≡" Am
\equiv 
endsnippet

snippet == "&=" Aim
&=
endsnippet

snippet =~ "≅" Aim
\cong 
endsnippet

snippet ~~ "∼" Aim
\sim 
endsnippet

snippet `\\sim ~` "≈" Am
\approx 
endsnippet

snippet >~ "≳" Am
\gtrsim 
endsnippet

snippet `(\\gtrsim|\\lesssim)(| );` "≲" Am
``
let r=["\\gtrsim", "\\lesssim"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet prop " ∝" wm
\propto 
endsnippet

snippet `\|->` "↦" Ami
\mapsto 
endsnippet

snippet `=>` "⟹" Ami
\implies 
endsnippet

snippet `(\\implies|\\impliedby)(| );` "→" Am
``
let r=["\\implied", "\\impliedby"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet `(?<![\\a-zA-Z])iff` "⟺" Am
\iff
endsnippet

snippet -> "→" Ami
\to 
endsnippet

snippet `(\\to|\\gets)(| );` "→" Am
``
let r=["\\to", "\\gets"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

// arrow

snippet uparrow "↑" mwi
\uparrow 
endsnippet

snippet arrUp "↑" mw
\uparrow 
endsnippet

snippet `(\\uparrow|\\Uparrow|\\upuparrows)(| );` "↑" Am
``
let r=["\\uparrow", "\\Uparrow", "\\upuparrows"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet downarrow "↓" mwi
\downarrow 
endsnippet

snippet arrDown "↓" mw
\downarrow 
endsnippet

snippet `(\\downarrow|\\Downarrow|\\downdownarrows)(| );` "↓" Am
``
let r=["\\downarrow", "\\Downarrow", "\\downdownarrows"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet arrLeft "←" mw
\leftarrow 
endsnippet

snippet `(\\leftarrow|\\Leftarrow|\\longleftarrow|\\Longleftarrow)(| );` "↓" Am
``
let r=["\\leftarrow", "\\Leftarrow", "\\longleftarrow", "\\Longleftarrow"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet arrRight "←" mw
\rightarrow 
endsnippet

snippet `(\\rightarrow|\\Rightarrow|\\longrightarrow|\\Longrightarrow)(| );` "↓" Am
``
let r=["\\rightarrow", "\\Rightarrow", "\\longrightarrow", "\\Longrightarrow"];
rv=cycle(r,m[1])+m[2];
``
endsnippet

snippet arrLeftRight "↔" mw
\leftrightarrow 
endsnippet

snippet `(\\leftrightarrow|\\Leftrightarrow|\\longleftrightarrow|\\Longleftrightarrow|\\leftrightarrows)(| );` "↓" Am
``
let r=["\\leftrightarrow", "\\Leftrightarrow", "\\longleftrightarrow", "\\Longleftrightarrow","\\leftrightarrows"];
rv=cycle(r,m[1])+m[2];
``
endsnippet


// ============ Greek Alphabat, function ==============

snippet `(?<!\\)(alpha|beta|gamma|delta|zeta|vartheta|theta|iota|varkappa|kappa|lambda|mu|nu|xi|pi|omicron|varpi|varrho|rho|varsigma|sigma|tau|upsilon|phi|psi|varphi|chi|omega|Gamma|varGamma|Delta|varDelta|Theta|varTheta|Lambda|varLambda|Xi|varXi|Pi|varPi|varSigma|Sigma|varUpsilon|Upsilon|varPhi|Phi|varPsi|Psi|varOmega|Omega)` "greek" wAm
\\``rv = m[1]``
endsnippet

snippet vartheta "ϑ" wm
\vartheta
endsnippet

snippet varkappa "𝜘" wm
\varkappa
endsnippet

snippet varpi "ϖ" wm
\varpi
endsnippet

snippet varrho "ϱ" wm
\varrho
endsnippet

snippet varsigma "ς" wm
\varsigma
endsnippet

snippet varphi "ϕ" wm
\varphi
endsnippet

snippet varpsi "𝛹" wm
\varpsi
endsnippet

snippet varGamma "𝛤" wm
\varGamma
endsnippet

snippet varDelta "𝛥" wm
\varDelta
endsnippet

snippet varTheta "𝛩" wm
\varTheta
endsnippet

snippet varLambda "𝛬" wm
\varLambda
endsnippet

snippet varXi "𝛯" wm
\varXi
endsnippet

snippet varPi "𝛱" wm
\varPi
endsnippet

snippet varSigma "𝛴" wm
\varSigma
endsnippet

snippet varUpsilon "𝛶" wm
\varUpsilon
endsnippet

snippet varPhi "𝛷" wm
\varPhi
endsnippet

snippet varPsi "𝛹" wm
\varPsi
endsnippet

snippet varOmega "𝛺" wm
\varOmega
endsnippet

snippet vareps "ε" wm
\varepsilon
endsnippet

snippet eta "η" wm
\eta
endsnippet

snippet epsilon "ϵ" wm
\epsilon
endsnippet

snippet `(?<![\\a-zA-Z])eta ` "greek" Am
 \eta 
endsnippet

snippet `\\no\\nu mber` "greek" Am
\nonumber
endsnippet

snippet `(?<=sinh|cosh|tanh|coth|csch|sech)` "in math" Am

endsnippet

snippet `(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp|perp|arcsin|arccos|arctan|arccot|arccsc|arcsec|zeta|timeshbar|Re|Im|det|nabla)` "in math" Am
\\``rv = m[1]``
endsnippet

snippet `(?<![\\a-zA-Z])(diag|rank|lcm|tr|Tr|res)` "math function" Am
\\operatorname{``rv = m[1]``}
endsnippet

snippet operatorname "\operatorname{$0} " wm
\operatorname{$0}
endsnippet

snippet `(?<![\\a-zA-Z])arg(max|min)` "argmin/max" Am
\mathop{\arg \\``rv = m[1]``}
endsnippet

snippet sqrt "sqrt" mwi
\sqrt{$0}
endsnippet

snippet math "math" mwi
\mathcal{$0}
endsnippet

snippet vec "vec" mwi
\vec{$0}
endsnippet

snippet cov "Covariance" mw
\mathrm{Cov} 
endsnippet

snippet mean "Expectation" wm
\mathbb{E}\left\lbrack $1 \right\rbrack $0
endsnippet

snippet Cons "const" wm
\text{Const. }
endsnippet

snippet kbt "kbt" wm
k_B T 
endsnippet

snippet ooo "∞" wmA
\infty 
endsnippet

snippet ... "cdots" iAm
\cdots 
endsnippet
\\ ============= sum & diff & integral =============

snippet sum "sum" wmi
\sum_{${1}}^{${2}} $0
endsnippet

snippet sumd "definite sum" wmi
\sum_{${1:n}=${2:1}}^{${3:\infty}} $0
endsnippet

snippet int "integral" wmi
\int \\mathrm{d}${1:x} \, $0
endsnippet

snippet intd "definite integral" wmi
\int_{${1:-\infty}}^{${2:\infty}} \\mathrm{d}${3:x} \, $0
endsnippet

snippet prod "product" wmi
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet diff "d/dx" Awm
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

snippet `(?<![\\a-zA-Z])dd[\s]{0,1}(((?!pp).)+)(?<!\s)\s` "parital / partial x" wAm
\frac{\mathrm{d}}{\mathrm{d} ``rv=m[1]``} $0
endsnippet

snippet `\\pi\sff` "parital / partial x" wAm
\frac{\partial ${1:y}}{\partial ${2:x}} $0
endsnippet

snippet `(?<![\\a-zA-Z])pp[\s]{0,1}(((?!pp).)+)(?<!\s)\s` "parital / partial x" wAm
\frac{\partial}{\partial ``rv=m[1]``} $0
endsnippet

snippet variat "delta / delta x" wAm
\frac{\delta ${1:y}}{\delta ${2:x}} $0
endsnippet

snippet partial "partial" wmi
\partial 
endsnippet

snippet pp "ddiff" wmi
\partial 
endsnippet

snippet dd "ddiff" wmi
\mathrm{d}
endsnippet

snippet ii "ddiff" wmi
\mathrm{i}
endsnippet

priority 300
snippet eto "math env" wAm
\mathrm{e}^{$1} $0
endsnippet

snippet taylor "taylor" wmi
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" wmi
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" wmi
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet into "loop int" wmi
\oint \\mathrm{d}${1:x} \\, $0
endsnippet

snippet int2 "double int" wmi
\iint \\mathrm{d}${1:x} \\, $0
endsnippet

snippet int3 "triple int" wmi
\iiint \\mathrm{d}${1:x} \\, $0
endsnippet

\\ ============= superscript subscript space =============

snippet dagger "dag" mwi
^{\dagger} 
endsnippet

snippet prime "prime" mwi
^{\prime} 
endsnippet

snippet square "prime" mwi
^2 
endsnippet

snippet star "prime" mwi
^* 
endsnippet

snippet `(?<=\S)[ ]*sub` "with the subscript" Am
_{$1}$0
endsnippet

snippet `(\\times)([a-zA-Z0-9])` "space after +-=\times" Am
\\times ``rv = m[2]``
endsnippet

snippet `([a-zA-Z\}])(\d)` "auto subscript with number after alphabat  a1->a_1" mA
``rv = m[1]``_``rv = m[2]``
endsnippet

snippet `(?<=[A-Za-z]|\})_(\d\d)` "two number subscript" mA
_{``rv=m[1]``}
endsnippet

snippet `(?<=\S)[ ]*tp` "with the subscript" Am
^{$1}$0
endsnippet

snippet `([a-zA-Z0-9\}\{\]\[\(\)])([\+\-\=])` "space before + - =" Am
``rv = m[1]`` ``rv = m[2]``
endsnippet

snippet `([\+\-\=])([a-zA-Z0-9\}\{\]\[\(\)])` "space before + - =" Am
``rv = m[1]`` ``rv = m[2]``
endsnippet

snippet `(?<=\\sin|\\cos|\\tan|\\cot|\\csc|\\sec|\\ln|\\log|\\exp|\\perp|\\arcsin|\\arccos|\\arctan|\\arccot|\\arccsc|\\arcsec|\\zeta|\\times|\\sinh|\\cosh|\\tanh|\\coth|\\csch|\\sech)([a-zA-Z])` "space after this" Am
 ``rv = m[1]``
endsnippet

snippet `(?<=\\alpha|\\beta|\\gamma|\\delta|\\zeta|\\vartheta|\\theta|\\iota|\\varkappa|\\kappa|\\lambda|\\mu|\\nu|\\xi|\\omicron|\\varpi|\\pi|\\varrho|\\rho|\\varsigma|\\sigma|\\tau|\\upsilon|\\phi|\\varphi|\\chi|\\omega|\\Gamma|\\varGamma|\\Delta|\\varDelta|\\Theta|\\varTheta|\\Lambda|\\varLambda|\\Xi|\\varXi|\\Pi|\\varPi|\\varSigma|\\Sigma|\\varUpsilon|\\Upsilon|\\varPhi|\\Phi|\\varPsi|\\Psi|\\varOmega|\\Omega|\\vert|\\varepsilon)([a-zA-Z])` "space after this" Am
 ``rv = m[1]``
endsnippet

snippet `(?<![ \\])\\quad\\,\\; {2,4}` "\quad -> \qquad  " Am
\\qquad $0
endsnippet

snippet `(?<![ \\])\\quad {2,4}` "\quad -> \quad\,\;" Am
\\quad\\;\\; $0
endsnippet

snippet `(?<![ \\])\\;\\; {2,4}` "\\;\\; -> \quad " Am
\\quad $0
endsnippet

snippet `(?<![ \\])   ` " -> \\;\\;" Am
\\;\\; $0
endsnippet


\\ ============= math env =============

snippet addTxt "text" miw
\text{$1} $0
endsnippet

snippet stt "text" miw
_\text{$1} $0
endsnippet

snippet addEqSet "math env" mw
\setlength\abovedisplayskip{${1:6}pt}
\setlength\belowdisplayskip{${2:6}pt}
endsnippet

snippet newAligened "align 环境" mw
\begin{aligned}
	$0
\end{aligned}
endsnippet

snippet newGathered "gather 环境" mw
\begin{gathered}
	$0
\end{gathered}
endsnippet

snippet newMatrix "用 这种形式 生成矩阵" mw
${1:2} x ${2:2} ${3:b}matrix${4:same}$0
endsnippet

snippet `([0-9]+) x ([0-9]+) (b|p)matrix\s` "bmatrix" Am
\begin{``rv = m[3]``matrix}``
	rv = gen_matrix(m[1],m[2]);
``\end{``rv = m[3]``matrix}$0
endsnippet

snippet `([0-9]+) x ([0-9]+) (b|p)matrixsame\s` "bmatrix" Am
\begin{``rv = m[3]``matrix}``
	let len2 = m[1];
    let len3 = m[2];
	let results = "\n";
	for (var i=0; i<len2; i++){
		results += '	' + "$1 & ".repeat(len3-1) + "$1 \\\\"+ "\\"+ "\n";
	}
	rv = results;
	``\end{``rv = m[3]``matrix}$0
endsnippet

snippet newCase "cases" mw
\begin{cases}
	$0
\end{cases}
endsnippet

snippet newVecCol "column vector" mw
\begin{pmatrix} ${1:x_1}\\\\ ${2:\vdots} \\\\ ${3:x_n} \end{pmatrix}$0
endsnippet

snippet newVecRow "row vector" mw
\begin{pmatrix} ${1:x_1}& ${2:\cdots}& ${3:x_n} \end{pmatrix}$0
endsnippet

\\ ============= font =============

snippet fontscript "花体 快捷后缀为 mscr" mwi
\mathcal{$0}
endsnippet

snippet fontblackboard "双线体 快捷后缀为 bb" mwi
\mathbb{$0}
endsnippet

snippet fontfrak "双线体 快捷后缀为 frak" mwi
\mathfrak{$0}
endsnippet

snippet fontbold "粗体 快捷后缀为 bf" mwi
\boldsymbol{$0}
endsnippet

snippet fontbold2 "粗体 快捷后缀为 bf" mwi
\mathbf{$0}
endsnippet

snippet ll "l" mw
\ell
endsnippet


\\ ============= braket =============

// lr method

snippet abs "left| right|" mwi
\left| $1 \vert $0
endsnippet

snippet norm "left\| right\|" mwi
\| $1 \| $0
endsnippet

snippet set "left\{ right\}" mwi
\lbrace $1 \rbrace $0
endsnippet

snippet lr) "\left( . \right)" mwi
\\left( $0 \\right)
endsnippet

snippet lr| "\left| . \right|" mwi
\\left| $0 \\right|
endsnippet

snippet lr|| "\left|| . \right||" mwi
\\left\\| $0 \\right\\|
endsnippet

snippet lr} "\left{ . \right}" mwi
\\left\lbrace $0 \\right\rbrace
endsnippet

snippet lr] "\left[ . \right]" mwi
\\left[ $0 \\right]
endsnippet

snippet lr<.> "\left\langle . \right\rangle" mwi
\\left< $0 \\right>
endsnippet

snippet lr<.| "\left\langle . \right|" mwi
\\left< $0 \\right|
endsnippet

snippet lr|.> "\left| . \right\rangle" mwi
\\left| $0 \\right>
endsnippet

snippet lrceil "ceil" mwi
\left\lceil $1 \right\rceil $0
endsnippet

snippet lrfloor "floor" mwi
\left\lfloor $1 \right\rfloor $0
endsnippet

// big method

snippet big) "\bigl( . \bigr)" mwi
\\${1:big}l( $0 \\${1:big}r)
endsnippet

snippet big| "\bigl| . \bigr|" mwi
\\${1:big}l| $0 \\${1:big}r|
endsnippet

snippet big|| "\bigl|| . \bigr||" mwi
\\${1:big}l\\| $0 \\${1:big}r\\|
endsnippet

snippet big} "\bigl{ . \bigr}" mwi
\\${1:big}l\lbrace $0 \\${1:big}r\rbrace
endsnippet

snippet big] "\bigl[ . \bigr]" mwi
\\${1:big}l[ $0 \\${1:big}r]
endsnippet

snippet big<.> "\bigl\langle . \bigr\rangle" mwi
\\${1:big}l< $0 \\${1:big}r>
endsnippet

snippet big<.| "\bigl\langle . \bigr|" mwi
\\${1:big}l< $0 \\${1:big}r|
endsnippet

snippet big|.> "\bigl| . \bigr\rangle" mwi
\\${1:big}l| $0 \\${1:big}r>
endsnippet

snippet bigInnerProduct "< . | . >" mwi
\\${1:big}l< $2 \\${1:big}| $0 \\${1:big}r>
endsnippet

snippet bigOuterProduct "| . >< . |" mwi
\\${1:big}l| $2 \\${1:big}>\\hspace{-0.5mm}\\${1:big}< $0 \\${1:big}r|
endsnippet

snippet bigMatrixElement "leftangle rightangle" mwi
\\${1:big}l< ${2} \\${1:big}| ${3} \\${1:big}| ${0} \\${1:big}r\rangle
endsnippet

// direct method 

snippet `\<\|>\s` "inner product" Am
\\braket{ $1 \\vert $2 } $0
endsnippet

snippet `\|><\|\s` "outer product" Am
\ket{$1}\hspace{-1mm}\bra{$2} $0
endsnippet

snippet `\<\|\|>\s` "matrix element" Am
\\braket{ $1 \\vert $2 \\vert $3 } $0
endsnippet

snippet `\|>\s` "|>" Am
\\ket{ $0 } 
endsnippet

snippet `<\|\s` "<|" Am
\\bra{ $0 }
endsnippet

snippet `<>\s` "<>" Am
\\braket{ $0 } 
endsnippet

snippet `\s<\s*([^\|]*)\s*\|\s` "<sth|" Am
 \\bra{``rv = m[1]``}
endsnippet

snippet `\s\|\s*([^\|]*)\s*>\s` "|sth>" Am
 \\ket{``rv = m[1]``}
endsnippet

snippet `\s<\s*([^\|]*)\s*>\s` "<sth>" Am
 \\braket{``rv = m[1]``}
endsnippet

// phy method

snippet phyBra "bra" mwi
\bra{ $1 }$0
endsnippet

snippet phyKet "ket" mwi
\ket{ $1 }$0
endsnippet

snippet phyAvg "leftangle rightangle" mwi
\braket{ $1 } $0
endsnippet

snippet phyInnerProduct "< . | . > " mwi
\braket{ $1 \\vert $2 } $0
endsnippet

snippet phyOuterProduct "| . > < . |" mwi
\ket{$1}\hspace{-1mm}\bra{$2} $0
endsnippet

snippet phyMatrixElement "< . | . | . >" mwi
\braket{ $1 \\vert $2 \\vert $3 } $0
endsnippet

\\ ============= hat bottom =============

snippet underline "underline" mwi
\underline{$0}
endsnippet

snippet overline "overline" mwi
\overline{$0}
endsnippet

snippet underbrc "underbrace" mwi
\underbrace{$1}_{$0}
endsnippet

snippet overbrc "overbrace" mwi
\overbrace{$1}^{$0}
endsnippet

snippet overtilde "tilde" mwi
\widetilde{$0}
endsnippet

snippet overarrow "vector" mwi
\overrightarrow{$0}
endsnippet

snippet overhat "hat" mi
\hat{$1}$0
endsnippet

snippet hat "hat" mi
\hat{$1}$0
endsnippet

snippet overtilde "tilde" mi
\tilde{$1}$0
endsnippet

snippet tilde "tilde" mi
\tilde{$1}$0
endsnippet

snippet overbar "bar" mi
\bar{$1}$0
endsnippet

snippet bar "bar" mi
\bar{$1}$0
endsnippet

snippet overdot "dot" mi
\dot{$1}$0
endsnippet

snippet dot "dot" mi
\dot{$1}$0
endsnippet

snippet overddot "dot" mi
\ddot{$1}$0
endsnippet

snippet ddot "dot" mi
\ddot{$1}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*mscr` "mathcal" Am
\mathcal{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])mscr` "mathcal" Am
\mathcal{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*hat` "hat" Am
\hat{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])hat` "hat" Am
\hat{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*hat` "hat" Am
\hat{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])hat` "hat" Am
\hat{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*tilde` "tilde" Am
\tilde{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])tilde` "tilde" Am
\tilde{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*bm` "bm" Am
\boldsymbol{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])bm` "bm" Am
\boldsymbol{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*dot` "dot" Am
\dot{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])dot` "dot" Am
\dot{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*doot` "ddot" Am
\ddot{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])doot` "ddot" Am
\ddot{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*vec` "vector" Am
\vec{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])vec` "vector" Am
\vec{``rv = m[1]``}$0
endsnippet

snippet `(\\)([a-zA-Z0-9]+)[\s]*bar` "vector" Am
\bar{\``rv = m[2]``}$0
endsnippet

snippet `([a-zA-Z0-9])bar` "vector" Am
\bar{``rv = m[1]``}$0
endsnippet

snippet `(?<=\S)[ ]*sr ` "with the subscript" Ami
^2 $0
endsnippet

snippet hh "hbar" mi
\hbar
endsnippet

snippet dbavg "<< >>" mi
\langle \hspace{-1mm} \langle $1 \rangle \hspace{-1mm} \rangle $0
endsnippet
